{"version":3,"file":"preflight.js","sourceRoot":"","sources":["../../../lib/twilio/preflight/preflight.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nimport { EventEmitter } from 'events';\nimport Connection from '../connection';\nimport Device from '../device';\nimport { RTCSampleTotals } from '../rtc/sample';\nimport RTCSample from '../rtc/sample';\nimport RTCWarning from '../rtc/warning';\nimport { NetworkTiming, TimeMeasurement } from './timing';\n\nexport declare interface PreflightTest {\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Completed]].\n   * During this time, [[PreflightTest.report]] is available and ready to be inspected.\n   * In some cases, this will not trigger if the test encounters a fatal error prior connecting to Twilio.\n   * See [[PreflightTest.failedEvent]].\n   * @param report\n   * @example `preflight.on('completed', report => console.log(report))`\n   * @event\n   */\n  completedEvent(report: PreflightTest.Report): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Connected]].\n   * @example `preflight.on('connected', () => console.log('Test connected'))`\n   * @event\n   */\n  connectedEvent(): void;\n\n  /**\n   * Raised whenever the test encounters a non-fatal error.\n   * @param error\n   * @example `preflight.on('error', error => console.log(error))`\n   * @event\n   */\n  errorEvent(error: Device.Error): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Failed]].\n   * This happens when establishing a connection to Twilio has failed or when a test call has encountered a fatal error.\n   * This is also raised if [[PreflightTest.stop]] is called while the test is in progress.\n   * @param error\n   * @example `preflight.on('failed', error => console.log(error))`\n   * @event\n   */\n  failedEvent(error: Device.Error | DOMError): void;\n\n  /**\n   * Raised when the [[Connection]] gets a webrtc sample object. This event is published every second.\n   * @param sample\n   * @example `preflight.on('sample', sample => console.log(sample))`\n   * @event\n   */\n  sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Raised whenever the [[Connection]] encounters a warning.\n   * @param name - The name of the warning.\n   * @example `preflight.on('warning', (name, data) => console.log({ name, data }))`\n   * @event\n   */\n  warningEvent(name: string, data: RTCWarning): void;\n}\n\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\nexport class PreflightTest extends EventEmitter {\n  /**\n   * Non-fatal errors. We use this to determine whether we should fail the test or not.\n   */\n  private static nonFatalErrors = [\n    // Insights connection failure\n    31400,\n  ];\n\n  /**\n   * Callsid generated for this test call\n   */\n  private _callSid: string | undefined;\n\n  /**\n   * The {@link Connection} for this test call\n   */\n  private _connection: Connection;\n\n  /**\n   * The {@link Device} for this test call\n   */\n  private _device: Device;\n\n  /**\n   * End of test timestamp\n   */\n  private _endTime: number | undefined;\n\n  /**\n   * Non-fatal errors detected during this test.\n   */\n  private _errors: Device.Error[];\n\n  /**\n   * Latest WebRTC sample collected for this test\n   */\n  private _latestSample: RTCSample | undefined;\n\n  /**\n   * Network related timing measurements for this test\n   */\n  private _networkTiming: NetworkTiming = {};\n\n  /**\n   * The options passed to {@link PreflightTest} constructor\n   */\n  private _options: PreflightTest.Options = {\n    codecPreferences: [Connection.Codec.PCMU, Connection.Codec.Opus],\n    debug: false,\n  };\n\n  /**\n   * The report for this test.\n   */\n  private _report: PreflightTest.Report | undefined;\n\n  /**\n   * WebRTC samples collected during this test\n   */\n  private _samples: RTCSample[];\n\n  /**\n   * Start of test timestamp\n   */\n  private _startTime: number;\n\n  /**\n   * Current status of this test\n   */\n  private _status: PreflightTest.Status = PreflightTest.Status.Connecting;\n\n  /**\n   * List of warning names and warning data detected during this test\n   */\n  private _warnings: PreflightTest.Warning[];\n\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @constructor\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n  constructor(token: string, options: PreflightTest.ExtendedOptions) {\n    super();\n\n    Object.assign(this._options, options);\n\n    this._errors = [];\n    this._samples = [];\n    this._warnings = [];\n    this._startTime = Date.now();\n\n    try {\n      this._device = new (options.deviceFactory || Device)(token, {\n        codecPreferences: this._options.codecPreferences,\n        debug: this._options.debug,\n      });\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(() => {\n        this._onFailed(error);\n      });\n      return;\n    }\n\n    this._device.on('ready', () => {\n      this._onDeviceReady();\n    });\n\n    this._device.on('error', (error: Device.Error) => {\n      this._onDeviceError(error);\n    });\n  }\n\n  /**\n   * Stops the current test and raises a failed event.\n   */\n  stop(): void {\n    const error: Device.Error = {\n      code: 31008,\n      message: 'Call cancelled',\n    };\n    this._device.once('offline', () => this._onFailed(error));\n    this._device.destroy();\n  }\n\n  /**\n   * Returns the report for this test.\n   */\n  private _getReport(): PreflightTest.Report {\n    const testTiming: TimeMeasurement = { start: this._startTime };\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration  = this._endTime - this._startTime;\n    }\n    return {\n      callSid: this._callSid,\n      errors: this._errors,\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      stats: this._getRTCStats(),\n      testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings,\n    };\n  }\n\n  /**\n   * Returns RTC stats totals for this test\n   */\n  private _getRTCSampleTotals(): RTCSampleTotals | undefined {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return { ...this._latestSample.totals };\n  }\n\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n  private _getRTCStats(): PreflightTest.RTCStats | undefined {\n    if (!this._samples || !this._samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce((statObj, stat) => {\n      const values = this._samples.map(s => s[stat]);\n      return {\n        ...statObj,\n        [stat]: {\n          average: values.reduce((total, value) => total + value) / values.length,\n          max: Math.max(...values),\n          min: Math.min(...values),\n        },\n      };\n    }, {} as any);\n  }\n\n  /**\n   * Called when the test has been completed\n   */\n  private _onCompleted(): void {\n    this._releaseHandlers();\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Completed;\n    this._report = this._getReport();\n    this.emit(PreflightTest.Events.Completed, this._report);\n  }\n\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n  private _onDeviceError(error: Device.Error): void {\n    if (PreflightTest.nonFatalErrors.includes(error.code)) {\n      this._errors.push(error);\n      this.emit(PreflightTest.Events.Error, error);\n      return;\n    }\n\n    // This is a fatal error so we will fail the test.\n    this._device.destroy();\n    this._onFailed(error);\n  }\n\n  /**\n   * Called on {@link Device} ready event\n   */\n  private _onDeviceReady(): void {\n    this._connection = this._device.connect();\n    this._setupConnectionHandlers(this._connection);\n\n    this._device.once('disconnect', () => {\n      this._device.once('offline', () => this._onCompleted());\n      this._device.destroy();\n    });\n  }\n\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n  private _onFailed(error: Device.Error | DOMError): void {\n    this._releaseHandlers();\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this.emit(PreflightTest.Events.Failed, error);\n  }\n\n  /**\n   * Clean up all handlers for device and connection\n   */\n  private _releaseHandlers(): void {\n    [this._device, this._connection].forEach((emitter: EventEmitter) => {\n      if (emitter) {\n        emitter.eventNames().forEach((name: string) => emitter.removeAllListeners(name));\n      }\n    });\n  }\n\n  /**\n   * Setup the event handlers for the {@link Connection} of the test call\n   * @param connection\n   */\n  private _setupConnectionHandlers(connection: Connection): void {\n    connection.on('warning', (name: string, data: RTCWarning) => {\n      this._warnings.push({ name, data });\n      this.emit(PreflightTest.Events.Warning, name, data);\n    });\n\n    connection.once('accept', () => {\n      this._callSid = connection.mediaStream.callSid;\n      this._status = PreflightTest.Status.Connected;\n      this.emit(PreflightTest.Events.Connected);\n    });\n\n    connection.on('sample', (sample) => {\n      // This is the first sample and no mos yet\n      if (typeof sample.mos !== 'number' && !this._samples.length) {\n        return;\n      }\n      this._latestSample = sample;\n      this._samples.push(sample);\n      this.emit(PreflightTest.Events.Sample, sample);\n    });\n\n    // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection',\n     }, {\n      reportLabel: 'ice',\n      type: 'iceconnection',\n     }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport',\n     }].forEach(({type, reportLabel}) => {\n\n      const handlerName = `on${type}statechange`;\n      const originalHandler = connection.mediaStream[handlerName];\n\n      connection.mediaStream[handlerName] = (state: string) => {\n        const timing = (this._networkTiming as any)[reportLabel]\n          = (this._networkTiming as any)[reportLabel] || { start: 0 };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if (state === 'connected') {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  }\n\n  /**\n   * The callsid generated for the test call.\n   */\n  get callSid(): string | undefined {\n    return this._callSid;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test ended.\n   */\n  get endTime(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * The latest WebRTC sample collected.\n   */\n  get latestSample(): RTCSample | undefined {\n    return this._latestSample;\n  }\n\n  /**\n   * The report for this test.\n   */\n  get report(): PreflightTest.Report | undefined {\n    return this._report;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test started.\n   */\n  get startTime(): number {\n    return this._startTime;\n  }\n\n  /**\n   * The status of the test.\n   */\n  get status(): PreflightTest.Status {\n    return this._status;\n  }\n}\n\nexport namespace PreflightTest {\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n  export enum Events {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Completed = 'completed',\n\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n    Connected = 'connected',\n\n    /**\n     * See [[PreflightTest.errorEvent]]\n     */\n    Error = 'error',\n\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n    Failed = 'failed',\n\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n    Sample = 'sample',\n\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n    Warning = 'warning',\n  }\n\n  /**\n   * Possible status of the test.\n   */\n  export enum Status {\n    /**\n     * Connection to Twilio has initiated.\n     */\n    Connecting = 'connecting',\n\n    /**\n     * Connection to Twilio has been established.\n     */\n    Connected = 'connected',\n\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n    Completed = 'completed',\n\n    /**\n     * The test has stopped and failed.\n     */\n    Failed = 'failed',\n  }\n\n  /**\n   * Options that may be passed to {@link PreflightTest} constructor for internal testing.\n   * @internalapi\n   */\n  export interface ExtendedOptions extends Options {\n    /**\n     * Device class to use.\n     */\n    deviceFactory?: new (token: string, options: Device.Options) => Device;\n  }\n\n  /**\n   * Options passed to {@link PreflightTest} constructor.\n   */\n  export interface Options {\n    /**\n     * An ordered array of codec names that will be used during the test call,\n     * from most to least preferred.\n     * @default ['pcmu','opus']\n     */\n    codecPreferences?: Connection.Codec[];\n\n    /**\n     * Whether to enable debug logging.\n     * @default false\n     */\n    debug?: boolean;\n  }\n\n  /**\n   * Represents the warning emitted from VoiceJS SDK.\n   */\n  export interface Warning {\n    /**\n     * Data coming from VoiceJS SDK associated with the warning.\n     */\n    data: RTCWarning;\n\n    /**\n     * Name of the warning.\n     */\n    name: string;\n  }\n\n  /**\n   * Represents RTC related stats that are extracted from RTC samples.\n   */\n  export interface RTCStats {\n    /**\n     * Packets delay variation.\n     */\n    jitter: Stats;\n\n    /**\n     * Mean opinion score, 1.0 through roughly 4.5.\n     */\n    mos: Stats;\n\n    /**\n     * Round trip time, to the server back to the client.\n     */\n    rtt: Stats;\n  }\n\n  /**\n   * Represents general stats for a specific metric.\n   */\n  export interface Stats {\n    /**\n     * The average value for this metric.\n     */\n    average: number;\n\n    /**\n     * The maximum value for this metric.\n     */\n    max: number;\n\n    /**\n     * The minimum value for this metric.\n     */\n    min: number;\n  }\n\n  /**\n   * Represents the report generated from a {@link PreflightTest}.\n   */\n  export interface Report {\n    /**\n     * CallSid generaged during the test.\n     */\n    callSid: string | undefined;\n\n    /**\n     * Non-fatal errors detected during the test.\n     */\n    errors: Device.Error[];\n\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n\n    /**\n     * WebRTC samples collected during the test.\n     */\n    samples: RTCSample[];\n\n    /**\n     * RTC related stats captured during the test.\n     */\n    stats?: RTCStats;\n\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n\n    /**\n     * Calculated totals in RTC statistics samples.\n     */\n    totals?: RTCSampleTotals;\n\n    /**\n     * List of warning names and warning data detected during this test.\n     */\n    warnings: Warning[];\n  }\n }\n"]}